"use strict";exports.id=705,exports.ids=[705],exports.modules={30705:(H,T,a)=>{a.d(T,{fromHttp:()=>U});var C=a(32117),i=a(3631),l=a(91943),I=a.n(l);const F="127.0.0.0/8",k="::1/128",E="169.254.170.2",N="169.254.170.23",u="[fd00:ec2::23]",m=(e,s)=>{if(e.protocol!=="https:"&&!(e.hostname===E||e.hostname===N||e.hostname===u)){if(e.hostname.includes("[")){if(e.hostname==="[::1]"||e.hostname==="[0000:0000:0000:0000:0000:0000:0000:0001]")return}else{if(e.hostname==="localhost")return;const n=e.hostname.split("."),r=t=>{const o=parseInt(t,10);return 0<=o&&o<=255};if(n[0]==="127"&&r(n[1])&&r(n[2])&&r(n[3])&&n.length===4)return}throw new i.C1(`URL not accepted. It must either be HTTPS or match one of the following:
  - loopback CIDR 127.0.0.0/8 or [::1/128]
  - ECS container host 169.254.170.2
  - EKS container host 169.254.170.23 or [fd00:ec2::23]`,{logger:s})}};var R=a(90130),O=a(93980),f=a(26769);function g(e){return new R.Kd({protocol:e.protocol,hostname:e.hostname,port:Number(e.port),path:e.pathname,query:Array.from(e.searchParams.entries()).reduce((s,[n,r])=>(s[n]=r,s),{}),fragment:e.hash})}async function p(e,s){const r=await(0,f.c9)(e.body).transformToString();if(e.statusCode===200){const t=JSON.parse(r);if(typeof t.AccessKeyId!="string"||typeof t.SecretAccessKey!="string"||typeof t.Token!="string"||typeof t.Expiration!="string")throw new i.C1("HTTP credential provider response not of the required format, an object matching: { AccessKeyId: string, SecretAccessKey: string, Token: string, Expiration: string(rfc3339) }",{logger:s});return{accessKeyId:t.AccessKeyId,secretAccessKey:t.SecretAccessKey,sessionToken:t.Token,expiration:(0,O.EI)(t.Expiration)}}if(e.statusCode>=400&&e.statusCode<500){let t={};try{t=JSON.parse(r)}catch{}throw Object.assign(new i.C1(`Server responded with status: ${e.statusCode}`,{logger:s}),{Code:t.Code,Message:t.Message})}throw new i.C1(`Server responded with status: ${e.statusCode}`,{logger:s})}const w=(e,s,n)=>async()=>{for(let r=0;r<s;++r)try{return await e()}catch{await new Promise(o=>setTimeout(o,n))}return await e()},S="AWS_CONTAINER_CREDENTIALS_RELATIVE_URI",_="http://169.254.170.2",v="AWS_CONTAINER_CREDENTIALS_FULL_URI",y="AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE",L="AWS_CONTAINER_AUTHORIZATION_TOKEN",U=(e={})=>{e.logger?.debug("@aws-sdk/credential-provider-http - fromHttp");let s;const n=e.awsContainerCredentialsRelativeUri??process.env[S],r=e.awsContainerCredentialsFullUri??process.env[v],t=e.awsContainerAuthorizationToken??process.env[L],o=e.awsContainerAuthorizationTokenFile??process.env[y],c=e.logger?.constructor?.name==="NoOpLogger"||!e.logger?console.warn:e.logger.warn;if(n&&r&&(c("@aws-sdk/credential-provider-http: you have set both awsContainerCredentialsRelativeUri and awsContainerCredentialsFullUri."),c("awsContainerCredentialsFullUri will take precedence.")),t&&o&&(c("@aws-sdk/credential-provider-http: you have set both awsContainerAuthorizationToken and awsContainerAuthorizationTokenFile."),c("awsContainerAuthorizationToken will take precedence.")),r)s=r;else if(n)s=`${_}${n}`;else throw new i.C1(`No HTTP credential provider host provided.
Set AWS_CONTAINER_CREDENTIALS_FULL_URI or AWS_CONTAINER_CREDENTIALS_RELATIVE_URI.`,{logger:e.logger});const A=new URL(s);m(A,e.logger);const K=new C.$c({requestTimeout:e.timeout??1e3,connectionTimeout:e.timeout??1e3});return w(async()=>{const d=g(A);t?d.headers.Authorization=t:o&&(d.headers.Authorization=(await I().readFile(o)).toString());try{const h=await K.handle(d);return p(h.response)}catch(h){throw new i.C1(String(h),{logger:e.logger})}},e.maxRetries??3,e.timeout??1e3)}}};
