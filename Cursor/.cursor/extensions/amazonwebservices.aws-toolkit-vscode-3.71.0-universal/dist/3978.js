"use strict";exports.id=3978,exports.ids=[3978],exports.modules={23978:(G,_,a)=>{a.d(_,{fromSSO:()=>z});var n=a(3631),d=a(70619);const E=s=>s&&(typeof s.sso_start_url=="string"||typeof s.sso_account_id=="string"||typeof s.sso_session=="string"||typeof s.sso_region=="string"||typeof s.sso_role_name=="string"),J=5*60*1e3,O="To refresh this SSO session run 'aws sso login' with the corresponding profile.",I={},P=async s=>{const{SSOOIDCClient:t}=await a.e(7034).then(a.bind(a,67034));if(I[s])return I[s];const o=new t({region:s});return I[s]=o,o},U=async(s,t)=>{const{CreateTokenCommand:o}=await a.e(7034).then(a.bind(a,67034));return(await P(t)).send(new o({clientId:s.clientId,clientSecret:s.clientSecret,refreshToken:s.refreshToken,grantType:"refresh_token"}))},N=s=>{if(s.expiration&&s.expiration.getTime()<Date.now())throw new n.Jh(`Token is expired. ${O}`,!1)},h=(s,t,o=!1)=>{if(typeof t>"u")throw new n.Jh(`Value not present for '${s}' in SSO Token${o?". Cannot refresh":""}. ${O}`,!1)};var F=a(79896);const{writeFile:H}=F.promises,K=(s,t)=>{const o=(0,d.C9)(s),r=JSON.stringify(t,null,2);return H(o,r)},$=new Date(0),M=(s={})=>async()=>{s.logger?.debug("@aws-sdk/token-providers - fromSso");const t=await(0,d.YU)(s),o=(0,d.Bz)(s),r=t[o];if(r){if(!r.sso_session)throw new n.Jh(`Profile '${o}' is missing required property 'sso_session'.`)}else throw new n.Jh(`Profile '${o}' could not be found in shared credentials file.`,!1);const c=r.sso_session,l=(await(0,d.qw)(s))[c];if(!l)throw new n.Jh(`Sso session '${c}' could not be found in shared credentials file.`,!1);for(const i of["sso_start_url","sso_region"])if(!l[i])throw new n.Jh(`Sso session '${c}' is missing required property '${i}'.`,!1);const w=l.sso_start_url,S=l.sso_region;let e;try{e=await(0,d.vf)(c)}catch{throw new n.Jh(`The SSO session token associated with profile=${o} was not found or is invalid. ${O}`,!1)}h("accessToken",e.accessToken),h("expiresAt",e.expiresAt);const{accessToken:m,expiresAt:k}=e,f={token:m,expiration:new Date(k)};if(f.expiration.getTime()-Date.now()>J)return f;if(Date.now()-$.getTime()<30*1e3)return N(f),f;h("clientId",e.clientId,!0),h("clientSecret",e.clientSecret,!0),h("refreshToken",e.refreshToken,!0);try{$.setTime(Date.now());const i=await U(e,S);h("accessToken",i.accessToken),h("expiresIn",i.expiresIn);const T=new Date(Date.now()+i.expiresIn*1e3);try{await K(c,{...e,accessToken:i.accessToken,expiresAt:T.toISOString(),refreshToken:i.refreshToken})}catch{}return{token:i.accessToken,expiration:T}}catch{return N(f),f}},y=!1,D=async({ssoStartUrl:s,ssoSession:t,ssoAccountId:o,ssoRegion:r,ssoRoleName:c,ssoClient:g,clientConfig:l,profile:w,logger:S})=>{let e;const m="To refresh this SSO session run aws sso login with the corresponding profile.";if(t)try{const p=await M({profile:w})();e={accessToken:p.token,expiresAt:new Date(p.expiration).toISOString()}}catch(p){throw new n.C1(p.message,{tryNextLink:y,logger:S})}else try{e=await(0,d.vf)(s)}catch{throw new n.C1(`The SSO session associated with this profile is invalid. ${m}`,{tryNextLink:y,logger:S})}if(new Date(e.expiresAt).getTime()-Date.now()<=0)throw new n.C1(`The SSO session associated with this profile has expired. ${m}`,{tryNextLink:y,logger:S});const{accessToken:k}=e,{SSOClient:f,GetRoleCredentialsCommand:i}=await a.e(4680).then(a.bind(a,34680)),T=g||new f(Object.assign({},l??{},{region:l?.region??r}));let x;try{x=await T.send(new i({accountId:o,roleName:c,accessToken:k}))}catch(p){throw new n.C1(p,{tryNextLink:y,logger:S})}const{roleCredentials:{accessKeyId:u,secretAccessKey:C,sessionToken:v,expiration:A,credentialScope:R,accountId:L}={}}=x;if(!u||!C||!v||!A)throw new n.C1("SSO returns an invalid temporary credential.",{tryNextLink:y,logger:S});return{accessKeyId:u,secretAccessKey:C,sessionToken:v,expiration:new Date(A),...R&&{credentialScope:R},...L&&{accountId:L}}},j=(s,t)=>{const{sso_start_url:o,sso_account_id:r,sso_region:c,sso_role_name:g}=s;if(!o||!r||!c||!g)throw new n.C1(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(s).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,{tryNextLink:!1,logger:t});return s},z=(s={})=>async()=>{s.logger?.debug("@aws-sdk/credential-provider-sso - fromSSO");const{ssoStartUrl:t,ssoAccountId:o,ssoRegion:r,ssoRoleName:c,ssoSession:g}=s,{ssoClient:l}=s,w=(0,d.Bz)(s);if(!t&&!o&&!r&&!c&&!g){const e=(await(0,d.YU)(s))[w];if(!e)throw new n.C1(`Profile ${w} was not found.`,{logger:s.logger});if(!E(e))throw new n.C1(`Profile ${w} is not configured with SSO credentials.`,{logger:s.logger});if(e?.sso_session){const u=(await(0,d.qw)(s))[e.sso_session],C=` configurations in profile ${w} and sso-session ${e.sso_session}`;if(r&&r!==u.sso_region)throw new n.C1("Conflicting SSO region"+C,{tryNextLink:!1,logger:s.logger});if(t&&t!==u.sso_start_url)throw new n.C1("Conflicting SSO start_url"+C,{tryNextLink:!1,logger:s.logger});e.sso_region=u.sso_region,e.sso_start_url=u.sso_start_url}const{sso_start_url:m,sso_account_id:k,sso_region:f,sso_role_name:i,sso_session:T}=j(e,s.logger);return D({ssoStartUrl:m,ssoSession:T,ssoAccountId:k,ssoRegion:f,ssoRoleName:i,ssoClient:l,clientConfig:s.clientConfig,profile:w})}else{if(!t||!o||!r||!c)throw new n.C1('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"',{tryNextLink:!1,logger:s.logger});return D({ssoStartUrl:t,ssoSession:g,ssoAccountId:o,ssoRegion:r,ssoRoleName:c,ssoClient:l,clientConfig:s.clientConfig,profile:w})}}}};
